/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.AuthManager;
import com.lob.api.Configuration;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.Headers;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClient;
import com.lob.api.http.client.HttpContext;
import com.lob.api.http.request.HttpRequest;
import com.lob.api.http.response.HttpResponse;
import com.lob.api.http.response.HttpStringResponse;
import com.lob.api.models.Card;
import com.lob.api.models.CardDeletion;
import com.lob.api.models.CardEditable;
import com.lob.api.models.CardsResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CardsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public CardsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public CardsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most
     * recently created addresses appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  sortBy  Optional parameter: Sorts items by ascending or descending dates.
     * @return    Returns the CardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CardsResponse listCards(
            final Integer limit,
            final Object beforeAfter,
            final Object sortBy) throws ApiException, IOException {
        HttpRequest request = buildListCardsRequest(limit, beforeAfter, sortBy);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListCardsResponse(context);
    }

    /**
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most
     * recently created addresses appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  sortBy  Optional parameter: Sorts items by ascending or descending dates.
     * @return    Returns the CardsResponse response from the API call
     */
    public CompletableFuture<CardsResponse> listCardsAsync(
            final Integer limit,
            final Object beforeAfter,
            final Object sortBy) {
        return makeHttpCallAsync(() -> buildListCardsRequest(limit, beforeAfter, sortBy),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListCardsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listCards.
     */
    private HttpRequest buildListCardsRequest(
            final Integer limit,
            final Object beforeAfter,
            final Object sortBy) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/cards");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("limit",
                (limit != null) ? limit : 10);
        queryParameters.put("before/after", beforeAfter);
        queryParameters.put("sort_by", sortBy);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listCards.
     * @return An object of type CardsResponse
     */
    private CardsResponse handleListCardsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        CardsResponse result = ApiHelper.deserialize(responseBody,
                CardsResponse.class);

        return result;
    }

    /**
     * Creates a new card given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Card response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Card createCard(
            final CardEditable body) throws ApiException, IOException {
        HttpRequest request = buildCreateCardRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateCardResponse(context);
    }

    /**
     * Creates a new card given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Card response from the API call
     */
    public CompletableFuture<Card> createCardAsync(
            final CardEditable body) {
        return makeHttpCallAsync(() -> buildCreateCardRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateCardResponse(context));
    }

    /**
     * Builds the HttpRequest object for createCard.
     */
    private HttpRequest buildCreateCardRequest(
            final CardEditable body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/cards");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createCard.
     * @return An object of type Card
     */
    private Card handleCreateCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Card result = ApiHelper.deserialize(responseBody,
                Card.class);

        return result;
    }

    /**
     * Retrieves the details of an existing card. You need only supply the unique customer
     * identifier that was returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the Card response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Card getCard(
            final String cardId) throws ApiException, IOException {
        HttpRequest request = buildGetCardRequest(cardId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCardResponse(context);
    }

    /**
     * Retrieves the details of an existing card. You need only supply the unique customer
     * identifier that was returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the Card response from the API call
     */
    public CompletableFuture<Card> getCardAsync(
            final String cardId) {
        return makeHttpCallAsync(() -> buildGetCardRequest(cardId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetCardResponse(context));
    }

    /**
     * Builds the HttpRequest object for getCard.
     */
    private HttpRequest buildGetCardRequest(
            final String cardId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/cards/{card_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("card_id",
                new SimpleEntry<Object, Boolean>(cardId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getCard.
     * @return An object of type Card
     */
    private Card handleGetCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Card result = ApiHelper.deserialize(responseBody,
                Card.class);

        return result;
    }

    /**
     * Update the details of an existing card. You need only supply the unique identifier that was
     * returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @param  description  Optional parameter: Description of the card.
     * @param  autoReorder  Optional parameter: Allows for auto reordering
     * @param  reorderQuantity  Optional parameter: The quantity of items to be reordered (only
     *         required when auto_reorder is true).
     * @return    Returns the Card response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Card updateCard(
            final String cardId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) throws ApiException, IOException {
        HttpRequest request = buildUpdateCardRequest(cardId, description, autoReorder,
                reorderQuantity);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateCardResponse(context);
    }

    /**
     * Update the details of an existing card. You need only supply the unique identifier that was
     * returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @param  description  Optional parameter: Description of the card.
     * @param  autoReorder  Optional parameter: Allows for auto reordering
     * @param  reorderQuantity  Optional parameter: The quantity of items to be reordered (only
     *         required when auto_reorder is true).
     * @return    Returns the Card response from the API call
     */
    public CompletableFuture<Card> updateCardAsync(
            final String cardId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) {
        return makeHttpCallAsync(() -> buildUpdateCardRequest(cardId, description, autoReorder,
                reorderQuantity),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateCardResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateCard.
     */
    private HttpRequest buildUpdateCardRequest(
            final String cardId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/cards/{card_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("card_id",
                new SimpleEntry<Object, Boolean>(cardId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        if (description != null) {
            formParameters.put("description", description);
        }
        if (autoReorder != null) {
            formParameters.put("auto_reorder", autoReorder);
        }
        if (reorderQuantity != null) {
            formParameters.put("reorder_quantity", reorderQuantity);
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateCard.
     * @return An object of type Card
     */
    private Card handleUpdateCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Card result = ApiHelper.deserialize(responseBody,
                Card.class);

        return result;
    }

    /**
     * Delete an existing card. You need only supply the unique identifier that was returned upon
     * card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the CardDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CardDeletion deleteCard(
            final String cardId) throws ApiException, IOException {
        HttpRequest request = buildDeleteCardRequest(cardId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteCardResponse(context);
    }

    /**
     * Delete an existing card. You need only supply the unique identifier that was returned upon
     * card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the CardDeletion response from the API call
     */
    public CompletableFuture<CardDeletion> deleteCardAsync(
            final String cardId) {
        return makeHttpCallAsync(() -> buildDeleteCardRequest(cardId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteCardResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteCard.
     */
    private HttpRequest buildDeleteCardRequest(
            final String cardId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/cards/{card_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("card_id",
                new SimpleEntry<Object, Boolean>(cardId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteCard.
     * @return An object of type CardDeletion
     */
    private CardDeletion handleDeleteCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        CardDeletion result = ApiHelper.deserialize(responseBody,
                CardDeletion.class);

        return result;
    }

}